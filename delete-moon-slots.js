import { MongoClient } from 'mongodb';
import dotenv from 'dotenv';
dotenv.config();

async function deleteMoonHospitalSlots() {
  const client = new MongoClient(process.env.MONGODB_URI);
  
  try {
    console.log('üöÄ Moon Hospital slot deletion ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá...\n');
    
    // Connect to MongoDB
    console.log('üîó MongoDB ‡¶§‡ßá connect ‡¶π‡¶ö‡ßç‡¶õ‡ßá...');
    await client.connect();
    const db = client.db();
    console.log('‚úÖ MongoDB database ‡¶è connected:', db.databaseName);
    
    const slotsCollection = db.collection('slots');
    
    // Count existing Moon Hospital slots
    console.log('\nüîç Moon Hospital ‡¶è‡¶∞ slots check ‡¶ï‡¶∞‡¶õ‡¶ø...');
    const totalMoonSlots = await slotsCollection.countDocuments({ hospital_id: 'moon' });
    console.log(`   ‡¶Æ‡ßã‡¶ü Moon Hospital slots ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶ó‡ßá‡¶õ‡ßá: ${totalMoonSlots}‡¶ü‡¶æ\n`);
    
    if (totalMoonSlots === 0) {
      console.log('‚ÑπÔ∏è ‡¶ï‡ßã‡¶® Moon Hospital slots ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§');
      return;
    }
    
    // Get breakdown of slot types
    const regularSlots = await slotsCollection.countDocuments({ 
      hospital_id: 'moon', 
      day_type: { $ne: 'thursday' }
    });
    const thursdaySlots = await slotsCollection.countDocuments({ 
      hospital_id: 'moon', 
      day_type: 'thursday' 
    });
    const templateRegularSlots = await slotsCollection.countDocuments({ 
      hospital_id: 'moon', 
      date: { $regex: /^template-/ },
      day_type: { $ne: 'thursday' }
    });
    const templateThursdaySlots = await slotsCollection.countDocuments({ 
      hospital_id: 'moon', 
      date: { $regex: /^template-/ },
      day_type: 'thursday'
    });
    
    console.log('üìã Slots breakdown:');
    console.log(`   Regular slots: ${regularSlots}‡¶ü‡¶æ`);
    console.log(`   Thursday slots: ${thursdaySlots}‡¶ü‡¶æ`);
    console.log(`   Template regular slots: ${templateRegularSlots}‡¶ü‡¶æ`);
    console.log(`   Template thursday slots: ${templateThursdaySlots}‡¶ü‡¶æ\n`);
    
    // Show sample slots before deletion
    const sampleSlots = await slotsCollection.find({ hospital_id: 'moon' }).limit(8).toArray();
    console.log('üìã Delete ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶Ü‡¶ó‡ßá sample slots:');
    sampleSlots.forEach((slot, index) => {
      const bookedCount = slot.booked_appointments ? slot.booked_appointments.length : 0;
      const maxAppointments = slot.max_appointments || 20;
      console.log(`   ${index + 1}. ${slot.date} - ${slot.start_time} - ${slot.end_time} - ${slot.day_type || 'regular'} (${bookedCount}/${maxAppointments} booked)`);
    });
    
    // Check for booked appointments
    const slotsWithBookings = await slotsCollection.find({
      hospital_id: 'moon',
      $or: [
        { 'booked_appointments.0': { $exists: true } },
        { booked_count: { $gt: 0 } }
      ]
    }).toArray();
    
    if (slotsWithBookings.length > 0) {
      console.log('\n‚ö†Ô∏è  WARNING: ‡¶ï‡¶ø‡¶õ‡ßÅ slots ‡¶è booked appointments ‡¶Ü‡¶õ‡ßá:');
      slotsWithBookings.forEach(slot => {
        const bookedCount = slot.booked_appointments ? slot.booked_appointments.length : slot.booked_count || 0;
        console.log(`   - ${slot.date} ${slot.start_time}-${slot.end_time}: ${bookedCount} appointments`);
      });
      console.log('\n   ‡¶è‡¶á slots delete ‡¶ï‡¶∞‡¶≤‡ßá appointment data ‡¶π‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡ßá ‡¶Ø‡ßá‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßá!');
    }
    
    console.log('\nüóëÔ∏è Moon Hospital ‡¶è‡¶∞ ‡¶∏‡¶¨ slots delete ‡¶ï‡¶∞‡¶õ‡¶ø...');
    
    // Delete all Moon Hospital slots
    const deleteResult = await slotsCollection.deleteMany({ hospital_id: 'moon' });
    
    console.log(`‚úÖ Successfully deleted ${deleteResult.deletedCount}‡¶ü‡¶æ slots for Moon Hospital\n`);
    
    // Verify deletion
    console.log('üîç Deletion verify ‡¶ï‡¶∞‡¶õ‡¶ø...');
    const remainingMoonSlots = await slotsCollection.countDocuments({ hospital_id: 'moon' });
    console.log(`   Moon Hospital slots remaining: ${remainingMoonSlots}‡¶ü‡¶æ`);
    
    if (remainingMoonSlots === 0) {
      console.log('‚úÖ ‡¶∏‡¶¨ Moon slots successfully delete ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá\n');
    } else {
      console.log('‚ùå ‡¶ï‡¶ø‡¶õ‡ßÅ Moon slots ‡¶è‡¶ñ‡¶®‡¶ì ‡¶Ü‡¶õ‡ßá!\n');
    }
    
    // Show final database summary
    const totalSlots = await slotsCollection.countDocuments();
    const gomotiSlots = await slotsCollection.countDocuments({ hospital_id: 'gomoti' });
    
    console.log('üìä Database summary:');
    console.log(`   Total slots in database: ${totalSlots}‡¶ü‡¶æ`);
    console.log(`   Gomoti Hospital slots: ${gomotiSlots}‡¶ü‡¶æ`);
    
  } catch (error) {
    console.error('‚ùå Error deleting Moon Hospital slots:', error);
    process.exit(1);
  } finally {
    await client.close();
    console.log('\nüîå Database connection closed');
  }
}

// Run the deletion
deleteMoonHospitalSlots();
