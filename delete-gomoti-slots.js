#!/usr/bin/env node

import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Slot from './models/Slot.js';

// Load environment variables
dotenv.config();

// MongoDB connection
const MONGODB_URI = process.env.MONGODB_URI;

async function deleteGomotiSlots() {
  try {
    // Connect to MongoDB
    console.log('ЁЯФЧ MongoDB рждрзЗ connect рж╣ржЪрзНржЫрзЗ...');
    await mongoose.connect(MONGODB_URI, {
      maxPoolSize: 20,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
      retryWrites: true,
      w: 'majority'
    });
    console.log('тЬЕ MongoDB database ржП connected:', mongoose.connection.name);

    // First, let's see how many Gomoti Hospital slots exist
    console.log('\nЁЯФН Gomoti Hospital ржПрж░ slots check ржХрж░ржЫрж┐...');
    const gomotiSlotCount = await Slot.countDocuments({ 
      hospital_id: 'gomoti' 
    });
    console.log(`   ржорзЛржЯ Gomoti Hospital slots ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ: ${gomotiSlotCount}ржЯрж╛`);

    if (gomotiSlotCount === 0) {
      console.log('   ржХрзЛржи slots ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ delete ржХрж░рж╛рж░ ржЬржирзНржпред');
      return;
    }

    // Show detailed breakdown of slots by type
    console.log('\nЁЯУЛ Slots breakdown:');
    
    const regularSlotCount = await Slot.countDocuments({ 
      hospital_id: 'gomoti',
      day_type: 'regular'
    });
    console.log(`   Regular slots: ${regularSlotCount}ржЯрж╛`);
    
    const thursdaySlotCount = await Slot.countDocuments({ 
      hospital_id: 'gomoti',
      day_type: 'thursday' 
    });
    console.log(`   Thursday slots: ${thursdaySlotCount}ржЯрж╛`);
    
    const templateRegularCount = await Slot.countDocuments({ 
      hospital_id: 'gomoti',
      date: 'template-regular'
    });
    console.log(`   Template regular slots: ${templateRegularCount}ржЯрж╛`);
    
    const templateThursdayCount = await Slot.countDocuments({ 
      hospital_id: 'gomoti',
      date: 'template-thursday'
    });
    console.log(`   Template thursday slots: ${templateThursdayCount}ржЯрж╛`);
    
    // Show some sample slots before deletion
    console.log('\nЁЯУЛ Delete рж╣ржУржпрж╝рж╛рж░ ржЖржЧрзЗ sample slots:');
    const sampleSlots = await Slot.find({ 
      hospital_id: 'gomoti' 
    }).limit(8).sort({ date: 1, start_time: 1 });
    
    sampleSlots.forEach((slot, index) => {
      const dateDisplay = slot.date.startsWith('template') ? slot.date : slot.date;
      const bookingStatus = `(${slot.current_appointments}/${slot.max_appointments} booked)`;
      console.log(`   ${index + 1}. ${dateDisplay} - ${slot.time_slot} - ${slot.day_type} ${bookingStatus}`);
    });

    // Check for any booked appointments
    const slotsWithAppointments = await Slot.countDocuments({ 
      hospital_id: 'gomoti',
      current_appointments: { $gt: 0 }
    });
    
    if (slotsWithAppointments > 0) {
      console.log(`\nтЪая╕П  Warning: ${slotsWithAppointments}ржЯрж╛ slots ржП appointments ржЖржЫрзЗ!`);
      
      const bookedSlots = await Slot.find({ 
        hospital_id: 'gomoti',
        current_appointments: { $gt: 0 }
      }).select('date time_slot current_appointments max_appointments');
      
      console.log('   Booked slots:');
      bookedSlots.forEach((slot, index) => {
        console.log(`   ${index + 1}. ${slot.date} - ${slot.time_slot} (${slot.current_appointments}/${slot.max_appointments})`);
      });
      
      console.log('\nЁЯТб ржПржЗ slots ржЧрзБрж▓рзЛ delete ржХрж░рж▓рзЗ appointments ржПрж░ data inconsistent рж╣ржпрж╝рзЗ ржпрж╛ржмрзЗред');
      console.log('   ржкрзНрж░ржержорзЗ appointments cancel/reschedule ржХрж░рж╛ ржЙржЪрж┐рждред');
    }

    // Delete all Gomoti slots
    console.log('\nЁЯЧСя╕П Gomoti Hospital ржПрж░ рж╕ржм slots delete ржХрж░ржЫрж┐...');
    
    const deleteResult = await Slot.deleteMany({ 
      hospital_id: 'gomoti' 
    });
    
    console.log(`тЬЕ Successfully deleted ${deleteResult.deletedCount}ржЯрж╛ slots for Gomoti Hospital`);

    // Verify the deletion
    console.log('\nЁЯФН Deletion verify ржХрж░ржЫрж┐...');
    const remainingGomotiSlots = await Slot.countDocuments({ 
      hospital_id: 'gomoti' 
    });
    console.log(`   Gomoti Hospital slots remaining: ${remainingGomotiSlots}ржЯрж╛`);

    if (remainingGomotiSlots > 0) {
      console.log('тЪая╕П  ржХрж┐ржЫрзБ slots ржПржЦржиржУ ржмрж╛ржХрж┐ ржЖржЫрзЗ!');
    } else {
      console.log('тЬЕ рж╕ржм Gomoti slots successfully delete рж╣ржпрж╝рзЗржЫрзЗ');
    }

    // Show summary of remaining slots in database
    console.log('\nЁЯУК Database summary:');
    const totalSlots = await Slot.countDocuments();
    console.log(`   Total slots in database: ${totalSlots}ржЯрж╛`);
    
    // Check other hospitals
    const moonSlotCount = await Slot.countDocuments({ 
      hospital_id: 'moon' 
    });
    if (moonSlotCount > 0) {
      console.log(`   Moon Hospital slots: ${moonSlotCount}ржЯрж╛`);
    }
    
    const drHelalSlotCount = await Slot.countDocuments({ 
      hospital_id: 'drhelal' 
    });
    if (drHelalSlotCount > 0) {
      console.log(`   Dr. Helal slots: ${drHelalSlotCount}ржЯрж╛`);
    }
    
    const popularSlotCount = await Slot.countDocuments({ 
      hospital_id: 'popular' 
    });
    if (popularSlotCount > 0) {
      console.log(`   Popular Diagnostic Centre slots: ${popularSlotCount}ржЯрж╛`);
    }

  } catch (error) {
    console.error('тЭМ Error deleting Gomoti slots:', error);
  } finally {
    await mongoose.connection.close();
    console.log('\nЁЯФМ Database connection closed');
    process.exit(0);
  }
}

// Run the script
console.log('ЁЯЪА Gomoti Hospital slot deletion рж╢рзБрж░рзБ рж╣ржЪрзНржЫрзЗ...\n');
deleteGomotiSlots();
